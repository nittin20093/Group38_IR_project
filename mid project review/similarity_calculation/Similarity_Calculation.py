# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12csB6JS9Z62Q4Jy6yBPNpK7vxSCC-PqI
"""

# pip install pillow annoy

# pip install tensorflow tensorflow_hub matplotlib numpy pandas

import urllib.request
from PIL import Image
import tensorflow as tf
import tensorflow_hub as hub
import numpy as np
# import os
import pandas as pd
import matplotlib.pyplot as plt 
# import base64
# import io
import math
import json

from annoy import AnnoyIndex
from scipy import spatial

downloadImagepath="./images/image.jpg"
ImageVectorPath="./src/image.jpg"
Imagevectorfolder="./src/image"
filepath="./goa_hotels_details.csv"




module_handle = "https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/feature_vector/4" 
module = hub.load(module_handle)


def getImagepath(index):
  return downloadImagepath[0:-4]+index+".jpg"

def getimagevector(index):
  return ImageVectorPath[0:-4]+index+".txt"

def getImagevector(imglink,index):
  
  path=getImagepath(index)
  # Downloading the image at path
  try:
    urllib.request.urlretrieve(imglink,path)
  except:
    return
  # img = Image.open(path)

  
  # making vector representation of image using tensorflow library
  img = tf.io.read_file(path)

  img = tf.io.decode_jpeg(img, channels=3)

  img = tf.image.resize_with_pad(img, 224, 224)

  img  = tf.image.convert_image_dtype(img, tf.float32)[tf.newaxis, ...]
  # print(img)

  features = module(img)
  feature_set = np.squeeze(features)  

  # print(feature_set)
  path=getimagevector(index)
  np.savetxt(path, feature_set, delimiter=',')
  # np.loadtxt(path, delimiter=',')
  return
  



def getSimilarityscore(index,count,similarity):
  sel_img_path=getimagevector(str(index))
  sel_arr=np.loadtxt(sel_img_path, delimiter=',')
  for i in range(count):
    image_path=getimagevector(str(i))
    try:
      img_arr=np.loadtxt(image_path, delimiter=',')
    except:
      continue
    simi = 1 - spatial.distance.cosine(sel_arr, img_arr)
    simi = int((simi * 10000)) / 10000.0
    # simi=cosineSim(list(sel_arr),list(img_arr))
    # print(simi)
    similarity[str(i)]=simi

  return similarity

def getImages(filepath):
  count=0
  file = open(filepath,"r")
  for hotel in file:
      count=count+1
      pa="img_link"
      pathend='room_size'
      comma=hotel.index(',')
      index=hotel[:comma]
      x=hotel.index(pa) + 12
      y=hotel.index(pathend)-4
      imglink=hotel[x:y]
      # print(imglink)
      # print(index)
      getImagevector(imglink,index)

  file.close
  return count
  





count=getImages(filepath)
similarity={}
similarity=getSimilarityscore(2,count,similarity)

similarity=dict(sorted(similarity.items(), key=lambda item: item[1]))
print(similarity)

